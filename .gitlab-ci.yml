variables:                         &default-vars
  CI_IMAGE:                        "paritytech/ci-linux:production"

.gen-rustdoc-vars:                 &gen-rustdoc-vars
  # Space separated values of branches and tags to generate rustdocs
  CONT_RUSTDOC_BUILT_REFS:         "main master"
  # Location of the docs index template
  REPO_URL:                        "https://${GITHUB_TOKEN}@github.com/jimmychu0807/advent-of-code-2020.git"
  DOC_INDEX_PAGE:                  "report_repair/index.html" # default redirected page
  # Where the `/latest` symbolic link links to.
  LATEST:                          "main"
  GIT_DEPTH:                       100
  SKIP_WASM_BUILD:                 1

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

.build-rustdoc-rules: &build-rustdoc-rules
  - if: $CI_PIPELINE_SOURCE == "web" && $RM_RUSTDOC_REF
    when: never
  - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "push" ||
      ($CI_PIPELINE_SOURCE == "web" && $BUILD_RUSTDOC_REF)

.rm-rustdoc-rules: &rm-rustdoc-rules
  - if: $CI_PIPELINE_SOURCE == "web" && $RM_RUSTDOC_REF

.install-git-lfs-script:        &install-git-lfs-script
  # setup git lfs
  - apt update
  - apt install -y gnupg2
  - curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
  - apt install -y git-lfs

.upsert-index-script:            &upsert-index-script
  # generate index.html based on BUILD_REF
  - yarn global add @jimmychu0807/index-tpl-crud
  - '[[ "${RESET_INDEX}" == "true" ]] && index-tpl-crud init
    "${GH_REPO:-CI_PROJECT_NAME}" "Advent of Code 2020" /tmp/index.html'
  - '[[ "${LATEST}" == "${BUILD_REF}" ]]
    && index-tpl-crud upsert -l /tmp/index.html ${BUILD_REF}
    || index-tpl-crud upsert /tmp/index.html ${BUILD_REF}'

.rm-index-script:               &rm-index-script
  - yarn global add @jimmychu0807/index-tpl-crud
  - index-tpl-crud rm /tmp/index.html ${RM_RUSTDOC_REF}

.reset-gh-info-script:          &reset-gh-info-script
  # Set git config
  - rm -rf .git/config
  - git config user.email "gitlab-ci@hkwtf.com"
  - git config user.name "${GITHUB_USER}"
  - git config remote.origin.url ${REPO_URL}
  - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
  - git fetch origin

.git-force-push-rm-script:      &git-force-push-rm-script
  # push it back to github gh-pages
  - git add --all --force
  - git commit -m "Updated docs for ${CI_COMMIT_REF_NAME}" || echo "___Nothing to commit___"
  - git push origin gh-pages --force
  - rm -rf .git/

.test-build-rustdoc:  &test-build-rustdoc
  # The actual check on whether we need to build rustdocs. This task will run if it is one of
  #   branch/tag in CONT_RUSTDOC_BUILT_REFS or triggered via web with BUILD_RUSTDOC_REF set to
  #   a branch/tag name.
  - '[[ " ${CONT_RUSTDOC_BUILT_REFS} " =~ " ${CI_COMMIT_REF_NAME} " || -n "${BUILD_RUSTDOC_REF}" ]]
    || { echo "No rustdoc built." && exit 0; }'
  - '[[ -n ${BUILD_RUSTDOC_REF} ]]
    && BUILD_REF=${BUILD_RUSTDOC_REF}
    || BUILD_REF=${CI_COMMIT_REF_NAME}'

.debug-script:  &debug-script
  - set -x

build-rustdoc:
  stage: deploy
  variables:
    <<: *default-vars
    <<: *gen-rustdoc-vars
  rules:
    - *build-rustdoc-rules
  image: ${CI_IMAGE}
  before_script:
    - *install-git-lfs-script
  script:
    - *test-build-rustdoc
    # Check if we are at the right branch/tag. if not check out the branch
    - if [[ -n "${BUILD_RUSTDOC_REF}" ]]; then
        git fetch --all;
        git checkout -f $BUILD_RUSTDOC_REF ||
          { echo "Checkout ${BUILD_RUSTDOC_REF} error." && exit 0; };
      fi
    # Actual rustdoc building
    - time cargo doc --no-deps --workspace --all-features --verbose ||
      { echo "Generate $BUILD_REF rustdocs failed" && exit 0; }
    - rm -f ./target/doc/.lock
    - mkdir public
    - mv target/doc public/${BUILD_REF}
    - echo "<meta http-equiv=refresh content=0;url=${DOC_INDEX_PAGE}>" > public/${BUILD_REF}/index.html
  artifacts:
    paths:
      - public

publish-rustdoc:
  stage: deploy
  needs:
    - job: build-rustdoc
      artifacts: true
  variables:
    <<: *default-vars
    <<: *gen-rustdoc-vars
  rules:
    - *build-rustdoc-rules
  image: node:16
  before_script:
    - *install-git-lfs-script
  script:
    - *test-build-rustdoc
    - rm -rf /tmp/*
    - mv -f public/${BUILD_REF} /tmp/docs
    - *reset-gh-info-script
    - git checkout -f gh-pages
    # Upsert <li/> entry into the index.html
    - cp index.html /tmp
    - *upsert-index-script
    - mv -f /tmp/index.html .
    # Ensure the destination dir is clear
    - rm -rf ${BUILD_REF}
    - mv -f /tmp/docs ${BUILD_REF}
    # Add the symlink
    - '[[ -e "$LATEST" ]] && { rm latest; ln -sf "${LATEST}" latest; }'
    - *git-force-push-rm-script

rm-rustdoc:
  stage: deploy
  variables:
    <<: *default-vars
    <<: *gen-rustdoc-vars
  rules:
    - *rm-rustdoc-rules
  image: node:16
  before_script:
    - *install-git-lfs-script
  script:
    - *reset-gh-info-script
    - git checkout -f gh-pages
    # Rm <li/> entry from the index.html
    - cp index.html /tmp
    - *rm-index-script
    - mv -f /tmp/index.html .
    # Remove the dir
    - rm -rf ${RM_RUSTDOC_REF}
    # Add the symlink
    - '[[ -h latest && "$(readlink latest)" == "{RM_RUSTDOC_REF}" ]] && rm latest'
    - *git-force-push-rm-script
